// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Fundraising {
    uint public donatedAmount;
    address public owner;
    uint public goalAmount;
    uint public donators;
    bool public isClosed;

    // Evento per tracciare le donazioni
    event donationReceived(address donor, uint amount);
    // Evento per tracciare il completamento della raccolta
    event fundraisingClosed(uint totalAmount, bool goalReached);
    // Evento per tracciare i prelievi
    event fundsWithdrawn(uint amount);

    constructor (uint _goalAmount) {
        owner = msg.sender;
        goalAmount = _goalAmount;
    }

    function donate() public payable {
        require(!isClosed, "Fundraising is now closed, goal reached!");
        require(msg.value > 0, "You must donate an amount greater than 0");

        // Add the donated amount to the donated amount
        donatedAmount += msg.value;
        donators++;
        
        // Emette un evento per tracciare la donazione
        emit donationReceived(msg.sender, msg.value);
        
        // If we have reached the goal, we close the fundraising
        if (donatedAmount >= goalAmount) {
            isClosed = true;
        }
    }

    function withdraw() public {
       
        // Only the owner can withdraw
        require(owner == msg.sender, "Only the owner can withdraw");
        
        // Transfer all remaining balance to the owner
        payable(owner).transfer(address(this).balance);

        emit fundsWithdrawn(msg.value);
    }
}
